
// --- INITIAL DATA ---
const INITIAL_ROSTERS = [
    {
        name: 'DT pit Katipo',
        rawText: `1	TENGGO NOVRIAN	DT HANVAN 101	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
2	MINAL BAHRI	DT HANVAN 101	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
3	GUNDALA	DT HANVAN 102	D	D	N	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N
4	FITRI ARYA PUTRA	DT HANVAN 102	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D
5	ADE KURNIAWAN	DT HANVAN 103	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N
6	NANDA NOVIANDI	DT HANVAN 103	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D
7	KELVIN PRANATA	DT HANVAN 104	OFF	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	OFF	D	D	D
8	ZULFAHMI FERNANDO	DT HANVAN 104	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
9	OWEN RAHMADANI MAHENDRA	DT HANVAN 105	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
10	DICKY PRANATA HS	DT HANVAN 105	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N
11	SANDRA HALIYA PUTRA	DT HANVAN 188	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
12	ALEX TORNANDO	DT HANVAN 188	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D
13	SUMARTO	DT HANVAN 189	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
14	MUJI SATRIA NOTO SUSENO	DT HANVAN 189	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I
15	UCI PURWANTO	DT HANVAN 190	OFF	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
16	DODI PRAYOGI	DT HANVAN 190	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D
17	DOLI INDRA	DT HANVAN 191	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D
18	FAREL ANANDA PARINDRA	DT HANVAN 191	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
19	EGI WIRANTO	DT HANVAN 192	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
20	WAHYU IMAM MAULANA	DT HANVAN 192	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR
21	ARIA DEBIANTO TARIGAN	DT HANVAN 193	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR
22	HARIONO	DT HANVAN 193	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
23	SADAM HUSEN	DT HANVAN 194	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
24	GUNAWAN MAHENDRA	DT HANVAN 194	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
25	HERMAN SAPUTRA	DT HANVAN 195	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D
26	EGI APRILI MARTA	DT HANVAN 195	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
27	SUGIHARTO	DT HANVAN 197	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
28	JONI ARDILES	DT HANVAN 197	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
29	YOPI ILHAMI	DT HANVAN 198	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
30	PURWOKO	DT HANVAN 198	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
31	AL ZONIKA	DT HANVAN 199	D	N	N	N	N	N	N	OFF	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N
32	PERISTIAWAN	DT HANVAN 199	N	OFF	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
33	CHARLES BILLANDIS	DT HANVAN 200	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR
34	REDI SYAPUTRA	DT HANVAN 200	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
35	MUHAMMAD FAJAR AFIKI	DT HANVAN 201	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
36	AGAM PRAYUDI	DT HANVAN 201	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
37	RISKY TRY UTANI	DT HANVAN 202	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D
38	SETIA BUDI	DT HANVAN 202	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N
39	ASMAREKI	DT HANVAN 203	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
40	IRFAN ARIANDI	DT HANVAN 203	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR
41	ENGKI PANHOTEN	DT HANVAN 204	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D
42	ANDI PRADANA	DT HANVAN 204	OFF	D	D	D	D	D	D	D	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	N	N	OFF
43	PANCA SUKMA WARDI	DT HANVAN 205	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
44	EKO RIZALDI	DT HANVAN 205	N	N	OFF	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	N	OFF
45	WAHYU RAMADAN	DT HANVAN 206	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N
46	ROBBY NANDA SYAPUTRA	DT HANVAN 206	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR
47	HARMANCA	DT HANVAN 207	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	CR
48	DESRIANTO	DT HANVAN 207	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I
49	M. RIZKI AKBAR	DT HANVAN 208	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
50	MUHAMMAD NUR SOFYAN	DT HANVAN 208	D	D	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
51	IWAN LUBIS	DT HANVAN 209	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
52	IWEN OGILVI SAPUTRA	DT HANVAN 209	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
53	DEPRIWAN	DT HANVAN 210	D	D	D	D	N	N	N	OFF	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
54	REDO ILAHI	DT HANVAN 210	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
55	RINALDI	DT HANVAN 211	D	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D
56	APRIANDA MUTIYOVA	DT HANVAN 211	I	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
57	MHD ROZALI	DT HANVAN 212	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D
58	SUYONO. P	DT HANVAN 212	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
59	YOGI DIKA PUTRA	DT HANVAN 213	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
60	HADIANTO	DT HANVAN 213	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR
61	YAN ALBERT	DT HANVAN 214	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR
62	GUSTI MAHENDRA	DT HANVAN 214	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
63	ZULFAHMI	DT HANVAN 215	N	N	N	N	N	N	N	OFF	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N
64	LUKMAN HAKIM ICHWAN	DT HANVAN 215	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
65	SUDARSO	DT HANVAN 216	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	CR	CR	CR	CR	CR	CR
66	ARI WIBOWO	DT HANVAN 216	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N
67	AGRI DASLINO PRATAMA	DT HANVAN 217	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
68	HERCULES	DT HANVAN 217	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D
69	ERIK USTRANI	DT HANVAN 218	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
70	ANDRE HASKOPER	DT HANVAN 218	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D
71	CANDRA INDRA	DT HANVAN 219	OFF	D	D	D	D	D	D	D	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N
72	PALMA	DT HANVAN 219	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	OFF	D	D	D	D	N	N	N	N	N	OFF	D	D
73	ADI KUSNADI	DT HANVAN 220	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	CR	CR	CR	CR
74	FAJRI ISLami	DT HANVAN 220	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D
75	ANDIKA SAPUTRA	DT HANVAN 221	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N
76	YOGI ANDRIAN	DT HANVAN 221	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
7g	TASRIANTO	DT HANVAN 222	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
78	RAHMAD DIANSAH	DT HANVAN 222	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
79	BOY DEPRAYANDI	DT HANVAN 223	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N
80	GANDUNG HENDRIYAWAN	DT HANVAN 223	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
81	EDO RIO OKTARA	DT HANVAN 224	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
82	DIKA PRANATA	DT HANVAN 224	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
83	BAYU SYAHPUTRA	DT HANVAN 225	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	CR	CR	CR	CR
84	SAPRIADI	DT HANVAN 225	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
85	SUPRIYADI	DT HANVAN 226	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR
86	OKI SAPUTRA	DT HANVAN 226	D	D	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D
87	EDI SAPUTRA	DT HANVAN 227	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
88	HENGKI SUDRAJAT	DT HANVAN 227	OFF	D	D	D	D	D	D	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	N	N	N	OFF	D	D
89	FARHAN NOVYANDRA	DT HANVAN 228	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D
90	ARBY RAMADHAN	DT HANVAN 228	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	N	N	N
91	JONI	DT HANVAN 229	D	D	D	D	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	CR	CR	CR	CR	CR	CR	CR
92	GALIH ARMANDO HR	DT HANVAN 229	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
93	KHAIRONI	DT HANVAN 230	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
94	KUSNEDI	DT HANVAN 230	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N
95	ROY MARTHEN	DT HANVAN 231	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I
96	POLMA SIJABAT	DT HANVAN 231	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
97	ISMAIL	DT HANVAN 232	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
98	PENI ANDIKA	DT HANVAN 232	CR	CR	CR	CR	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	D	N	N	N	N	N
99	MHD. DAI FASAID	DT HANVAN 233	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N
100	AGUNG PRANATA	DT HANVAN 233	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D
101	ENDANG KUSMA	DT HANVAN 234	N	N	OFF	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D
102	DINO ISYAH PUTRA UTAMA	DT HANVAN 234	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
103	ANDITO SAPUTRA	DT HANVAN 235	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	CR	CR
104	ANDI IRAWAN	DT HANVAN 235	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
105	BANGSA PERANGIN-ANGIN	DT HANVAN 236	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR	CR	CR
106	RERI ANDRIONETA	DT HANVAN 236	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
107	BOKNER GALINGGING	DT HANVAN 237	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
108	GALLVIN CARLO	DT HANVAN 237	N	N	N	OFF	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N
109	SYAFII SIREGAR	DT HANVAN 238	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	CR	CR	CR	CR	CR
110	RAMA DANI	DT HANVAN 238	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N
111	RIKI SAPUTRA 1	DT HANVAN 239	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
112	SANDI WIBOWO	DT HANVAN 239	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF
113	FERRY ADRIAN	DRIVER DT SPARE	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
114	M. ILHAM SURYA WARDANA LUMY	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
115	OCTO GANDA MARTUA	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
116	NOPRI NADA SAPUTRA	DRIVER DT SPARE	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
117	WIDI KURNIAWAN	DRIVER DT SPARE	CR	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D
118	WILLIE HARYAJI MOES	DRIVER DT SPARE	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
119	PENI ERWANDI	DRIVER DT SPARE	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D
120	REKI HERDANTONI	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
121	AGUNG SUGIHARTO	DRIVER DT SPARE	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
122	ANGGA ADI PUTRA	DRIVER DT SPARE	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N
123	MUHAMMAD YANI	DRIVER DT SPARE	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
124	MARLANI	DRIVER DT SPARE	CR	CR	I	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
125	MASDIANSYAH	DRIVER DT SPARE	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N
126	ARISMAN. J	DRIVER DT SPARE	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR
127	RIO RAFLES SINAGA	DRIVER DT SPARE	D	D	D	D	D	D	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	N	N	OFF	D	D
128	DIO SYAHPUTRA	DRIVER DT SPARE	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N
129	SIWIN CANIAGO	DRIVER DT SPARE	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	OFF	D	D	D	D	D
130	IRWAN	DRIVER DT SPARE	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
131	LUTFI ANDRIANTO	DRIVER DT SPARE	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D
132	DENAS ANDIKA ROSZI	DRIVER DT SPARE	OFF	D	D	D	D	D	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N
133	VITO PRASETYO	DRIVER DT SPARE	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D
134	HANNA SETIA GRAHAFFY	DRIVER DT SPARE	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	CR	CR
135	ANDIKA ARDIAN	DRIVER DT SPARE	N	OFF	D	D	D	D	D	D	D	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N
136	INDRA BUANA	DRIVER DT SPARE	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D
137	ALDONI CANDRA	DRIVER DT SPARE	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	CR
138	JAMAL	DRIVER DT SPARE	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	CR
139	MIONO WIBOWO	DRIVER DT SPARE	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N
140	JHONI ALPUTRA	DRIVER DT SPARE	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N
141	RANGGA SENARU	DRIVER DT SPARE	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
142	KHAIRUL	DRIVER DT SPARE	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N
143	ERISON	DRIVER DT SPARE	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D
144	JODI WINALDO	DRIVER DT SPARE	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N
145	RIO AFRIADI	DRIVER DT SPARE	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
146	SUKMA MUHARIANTO	DRIVER DT SPARE	D	N	N	N	N	N	N	OFF	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N
147	ARI PRA SATIO	DRIVER DT SPARE	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D
148	SOPIAN HADI	DRIVER DT SPARE	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N
149	HENDI JAI	DRIVER DT SPARE	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
150	YOGA SABRAN HUDA	DRIVER DT SPARE	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N
151	MISGIADI	DRIVER DT SPARE	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
152	JACKSON PARULIAN SITINJAK	DRIVER DT SPARE	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
153	ANTONI	DRIVER DT SPARE	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
154	ALAN EFENDI	DRIVER DT SPARE	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
155	DONI SUSANTO	DRIVER DT SPARE	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	N	OFF
156	RIKI SAPUTRA  2	DRIVER DT SPARE	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
157	AFRIANSYAH	DRIVER DT SPARE	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
158	JAMALUDIN SINAGA	DRIVER DT SPARE	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D
159	JUNAIDI	DRIVER DT SPARE	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N`
    },
    {
        name: 'DT pit Sukamaju',
        rawText: `1	R. MAMBI	HANVAN XCMG 51	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF
2	M. ZAINATUL AGUNG	HANVAN XCMG 51	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D
3	M. NORMAN HAKIM	HANVAN XCMG 55	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR
4	VIKI LIANDI	HANVAN XCMG 55	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
5	HERMINTO. R	DT HANVAN 98	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N
6	BINTARA PRIYANDI	DT HANVAN 98	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D
7	RIDHO ILLAFI SUKMA	DT HANVAN 99	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N
8	RUDI HARTONO	DT HANVAN 99	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
9	TOUPIT ASMAN	DT HANVAN 100	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	OFF	D	D	D	D	D	D
10	ADIANTO	DT HANVAN 100	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N
11	NOPRIANDI	QUESTER 10 CWE 280	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
12	GENTA AULIA GUNTUR	QUESTER 10 CWE 280	D	D	N	N	N	N	N	OFF	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
13	RONI SUPARLI	QUESTER 11 CWE 280	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
14	FAISAL AMRI	QUESTER 11 CWE 280	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
15	IPIN EFENDI	QUESTER 14 CWE 280	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
16	PEJO DELPISA CANDRA	QUESTER 14 CWE 280	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
17	SARIKANDI	QUESTER 28 CWE 280	N	N	N	OFF	D	D	D	D	D	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF
18	ADI ANUGRAH	QUESTER 28 CWE 280	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
19	RENKI WIGUNA	QUESTER 29 CWE 280	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
20	DEDI SYAFRIADI	QUESTER 29 CWE 280	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N
21	JUFRIL	QUESTER 31 CWE 280	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
22	DANIL MUSTAPA HARUN	QUESTER 31 CWE 280	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
23	JALPION	QUESTER 32 CWE 280	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
24	MUHAMMAD FAJRI AL MARSY	QUESTER 32 CWE 280	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	CR
25	PIRDAUS	QUESTER 33 CWE 280	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
26	DIDIK HERMAWAN	QUESTER 33 CWE 280	D	D	D	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D
27	DANIEL SYAFIKRI	QUESTER 34 CWE 280	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
28	IKNU SETYAWAN	QUESTER 34 CWE 280	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
29	KEPRIANTO	QUESTER 35 CWE 280	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D
30	ALDI PRAJANATA	QUESTER 35 CWE 280	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N	N	N	N
31	NASRIANDI	QUESTER 37 CWE 280	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF
32	REGI ARMI VOLANDRA	QUESTER 37 CWE 280	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N
33	TRI SUSANTO	QUESTER 38 CWE 280	OFF	D	D	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	N	N	OFF	D
34	ALFI ZULFAROLI	QUESTER 38 CWE 280	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
35	DEDI HENDRA	QUESTER 39 CWE 280	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N
36	NANDO EKA PUTRA	QUESTER 39 CWE 280	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D
37	ROBY KURNIADO	QUESTER 41 CWE 280	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
38	WIDI ASROFI	QUESTER 41 CWE 280	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
39	RIO PEBRIAN	QUESTER 42  CWE 280	N	N	N	N	N	OFF	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N
40	BENNY SAPUTRA	QUESTER 42  CWE 280	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
41	JOKO TRIANTO	QUESTER 44  CWE 280	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
42	DIAN DAFIT	QUESTER 44  CWE 280	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N
43	M. REJA	QUESTER 45  CWE 280	N	OFF	D	D	D	D	D	D	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D
44	ALTASER	QUESTER 45  CWE 280	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N
45	PANDI ZIKRILLAH	QUESTER 46  CWE 280	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
46	RHADIUS PUTRA WIRA	QUESTER 46  CWE 280	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D
47	ABIL JANUANDA RIZKY	QUESTER 47  CWE 280	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
48	ALIT PITOYO	QUESTER 47  CWE 280	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D
49	BENITA INDRA	QUESTER 07 CWE 370	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
50	FAISAL	QUESTER 07 CWE 370	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D
51	ARGIANTO	QUESTER 17 CWE 370	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
52	PRIANDI RISKI	QUESTER 17 CWE 370	N	OFF	D	D	D	D	D	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D
53	WAWAN GUSTIAN	QUESTER 18 CWE 370	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N
54	FITRA RAMADHAN	QUESTER 18 CWE 370	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D
55	FERY ALDY YANSYA	QUESTER 19 CWE 370	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
56	IRWAN HIDAYAD	QUESTER 19 CWE 370	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
57	WISNU ADI PARNATA	QUESTER 20 CWE 370	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
58	HENDI AFRIKA	QUESTER 20 CWE 370	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D
59	ARDIANTON	QUESTER 21 CWE 370	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
60	AHMAD CHAIRUL MUSTOPA	QUESTER 21 CWE 370	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	CR	CR	CR
61	MAIRIZALDI	QUESTER 22 CWE 370	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
62	SEPTA NANDA PRAYOGA	QUESTER 22 CWE 370	N	N	OFF	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
63	DEDE WAHYUDI	QUESTER 76 CWE 370	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
64	ARTA DARMA SYAPUTRA	QUESTER 76 CWE 370	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
65	RONI SAPUTRA	QUESTER 78 CWE 370	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D
66	RIDIANTO RODESKA	QUESTER 78 CWE 370	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	CR
67	MEGI RISMAYANTO	QUESTER 79 CWE 370	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
68	HENDRI	QUESTER 79 CWE 370	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D
69	ASHABUL AIFANI	QUESTER 80 CWE 370	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
70	ANDRE ANDIKA RAMADAN	QUESTER 80 CWE 370	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	CR	CR	CR
71	ANTON ASPAPERA	QUESTER 81 CWE 370	D	D	D	D	D	D	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D
72	JEMVORA EFIL BREN	QUESTER 81 CWE 370	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF
73	MUSTAFA RASYID	QUESTER 82 CWE 370	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	CR	CR	CR	CR	CR
74	HERIANTO	QUESTER 82 CWE 370	CR	CR	I	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
75	MALVIN RIFANDA POHAN	QUESTER 83 CWE 370	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
76	ALWIS JAYA	QUESTER 83 CWE 370	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N
77	MARDIANTO	QUESTER 84 CWE 370	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
78	HELFI NANDA	QUESTER 84 CWE 370	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
79	EDY JULIWANTO S	QUESTER 85 CWE 370	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
80	PROPEL GANDI	QUESTER 85 CWE 370	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
81	OKI OKTANIO	QUESTER 106 CWE 370	CR	CR	CR	CR	CR	I	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
82	RAHMAD GUNAWAN	QUESTER 106 CWE 370	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF
83	SANDI BUDI SURYADI	QUESTER 107 CWE 370	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
84	NANDRO SAGITA	QUESTER 107 CWE 370	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
85	PRIMA MIDIONO	QUESTER 108 CWE 370	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
86	BUDI SARWONO	QUESTER 108 CWE 370	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N
87	ARI YAHYA	QUESTER 124 CWE 370	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
88	APENDI	QUESTER 124 CWE 370	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
89	YANDRA APRINALDI	QUESTER 125 CWE 370	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR
90	ROYNALDI	QUESTER 125 CWE 370	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	OFF	D	D	D
91	NURMAN	DT 03 ORANGE	N	N	N	N	N	N	OFF	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N
92	DEDE SUMANTRI	DT 03 ORANGE	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D
93	ALFIAN	DT 04 ORANGE	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D
94	YULIUS	DT 04 ORANGE	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N
95	JOND ANDRI SYAPUTRA	DT 05 ORANGE	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N
96	ROMA DANI	DT 05 ORANGE	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
97	BOBI JASTRIADI	DT 63 ORANGE	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	N	N	N
98	MANGARA TUA SIANTURI	DT 63 ORANGE	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D
99	DITO PUTRA	DT 65 ORANGE	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
100	ARLIS	DT 65 ORANGE	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
101	ENNO	DT 66 ORANGE	CR	CR	CR	I	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N
102	NANDA ADITYA PRATAMA	DT 66 ORANGE	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
103	DEDI GUSTIAWAN	DT 67 ORANGE	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR
104	AMRIANTO	DT 67 ORANGE	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D
105	MERZA ADE PUTRA	DT 109 ORANGE	D	D	D	D	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	OFF	D	D	D	D	D
106	EGO SAPUTRA	DT 109 ORANGE	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
107	GIO ANTONI	DT 110 ORANGE	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N
108	ANDRI	DT 110 ORANGE	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
109	ARISMAN	DT 111 ORANGE	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	OFF	D	D	D	D	D
110	BORKAT SIREGAR	DT 111 ORANGE	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR	CR
111	M. ROBI YANTO	DT 112 ORANGE	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	CR	CR	CR	CR	CR	CR
112	ARI KURNIAWAN	DT 112 ORANGE	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D
113	RANGGA SYAHPUTRA	DT 114 ORANGE	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N
114	RABILU SANDI	DT 114 ORANGE	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
115	INDIKA BOBI PRATAMA	DT 115 ORANGE	CR	I	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
116	ANDIKA	DT 115 ORANGE	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
117	LEARDO YOGI LABENDRA	DT 116 ORANGE	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N
118	ANDI	DT 116 ORANGE	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D
119	SUROTO	DT 119 ORANGE	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N
120	PUR WANTO	DT 119 ORANGE	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
121	SLAMET	DT 120 ORANGE	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	CR	CR	CR
122	JULPAN	DT 120 ORANGE	D	D	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D
123	SUTRISNO	DT 121 ORANGE	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N
124	GAPIS SAGITA	DT 121 ORANGE	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D
125	RIFFANDI IHSAN	DT 122 ORANGE	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D
126	MUHAMMAD FAZAL KHAN	DT 122 ORANGE	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
127	BENI RAMADANI	DT HINO 01 (68)	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	CR
128	APRIYADI	DT HINO 01 (68)	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N
129	HAMID	DT HINO 02 (69)	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
130	RAHMAT PRIADI	DT HINO 02 (69)	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D
131	SUWANDI HADI S	DT HINO 03 (70)	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
132	MUHAMMAD FAHREZA AKBAR	DT HINO 03 (70)	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
133	DICKY RAMADHANI	DT HINO 05 (72)	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	CR	CR	CR	CR	CR
134	TRI SEPRINALDI	DT HINO 05 (72)	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
135	AHMAD SLAMED	DT FIGHTER 73	I	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
136	MUKRI INDRA SAPUTRA	DT FIGHTER 73	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N
137	RISKI RAMADANI	DT FIGHTER 74	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
138	ARIF SYAHFRUDIN	DT FIGHTER 74	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
139	DONES MARTHA ZULPERLIN	DT FIGHTER 75	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
140	HADI KESUMA	DT FIGHTER 75	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	CR	CR	CR	CR	CR
141	RANGGA APRIANZA	DT MERCHY 27	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N
142	JHONATAN YESA PUTRA	DT MERCHY 27	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D
143	MUHAMMAD AMIN	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
144	SURIANTO	DRIVER DT SPARE	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
145	ASPARAINI	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N
146	BERKAH ALHADI. S	DRIVER DT SPARE	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
147	SADRI RAMADANI	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
148	NANDA SYAHPUTRA	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
149	RANDA	DRIVER DT SPARE	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D
150	BOBI ARTANTO	DRIVER DT SPARE	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
151	EKA KUSDIANTO	DRIVER DT SPARE	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
152	GRIMALDI	DRIVER DT SPARE	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
153	SELAMET	DRIVER DT SPARE	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR
154	NANANG MAULANA	DRIVER DT SPARE	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR
155	BUDIMAN MARPAUNG	DRIVER DT SPARE	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF
156	EKA NOPRIANTO	DRIVER DT SPARE	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
157	BILLY EKA SUKARNA	DRIVER DT SPARE	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
158	ANDI SUSANTO	DRIVER DT SPARE	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D`
    },
    {
        name: 'DOZER',
        rawText: `1	ROKI HERMAWAN	DZ KOMATSU 11	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N
2	AREA OKTA MIRANDA	DZ KOMATSU 11	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D
3	SYAHRUL SIGALINGGING	DZ KOMATSU 13	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D
4	GOGON S	DZ KOMATSU 13	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
5	YUDI YANTO	DZ KOMATSU 08	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N
6	SURIYONO	DZ KOMATSU 08	N	N	N	OF	D	D	D	D	D	D	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D
7	HENDRA GUNAWAN	DZ KOMATSU 30	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D
8	KIKI ANDRIADI	DZ KOMATSU 30	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N
9	DARYANTO	DZ KOMATSU 10 (STOKFILE)	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N
10	ENCEP SUBARNA	DZ KOMATSU 10 (STOKFILE)	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	N	OF	D
11	RIKI HARTONO	DZ KOMATSU 15	D	D	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	N	N	N	N	N
12	SATINO	DZ KOMATSU 15	N	N	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	N	N	N	N	OF	D	D	D	D	D
13	HENDRIKO ISKANDAR	DZ KOMATSU 19	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D
14	AJAT SUDRAJAT	DZ KOMATSU 19	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	CR	CR	CR	CR	CR	CR	CR	CR	CR
15	SUTRIONO	DZ KOMATSU 29	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N
16	HARIS ISKANDAR	DZ KOMATSU 29	I	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D
17	SELAMAT RIYANTO	DZ KOMATSU 33	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	N
18	M. ISYA	DZ KOMATSU 33	N	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	CR	CR	CR	CR	CR	I
19	YOSSY GUSMAN	DZ KOMATSU 34	D	N	N	N	N	N	N	N	OF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	OFF
20	YOGA TEDI PRATAMA	DZ KOMATSU 34	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D
21	EKA SRIL	DZ KOMATSU 35	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D
22	MELDI MUZALDA ALFA	DZ KOMATSU 35	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
23	SURIANTO	DZ KOMATSU 36	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D
24	SURATNO	DZ KOMATSU 36	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
25	FERYANTO SIRAIT	DZ KOMATSU 37	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
26	SULTAN SIPAHUTAR	DZ KOMATSU 37	D	D	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D
27	IGO PRASETYO	DZ LIU GONG 02	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D	N	N	N	N
28	ERJENCES SINAGA	DZ LIU GONG 03	D	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N
29	YOGA ASTIKA	DZ LIU GONG 03	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR
30	DEDI HENDRA	DZ LIU GONG 04	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	CR	CR	CR
31	RAHMAN AFRIADI	DZ LIU GONG 04	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D
32	DEDI KANDRA	DZ SHANTUY 07	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D
33	ADI PRAWIBOWO	DZ SHANTUY 07	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N
34	KHOIRUL SALEH LUBIS	DZ SHANTUI 26	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N
35	ADRIL ANDONI	DZ SHANTUI 26	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
36	JERRY YAN MACHER	SPARE	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N
37	JEFRI MIDIANTO	SPARE	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D
38	JEFFRI ARDIANSYAH	SPARE	N	OF	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D	D	D
39	NURIDIN	SPARE	D	D	D	D	N	N	N	OF	D	D	D	D	D	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	OFF	D	D	D
40	ZULKIFLI	SPARE	CR	I	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N
41	FENDY HALOMON SIREGA	SPARE	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N
42	FAJAR NURHADI	SPARE	OF	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR
43	EKA SAPUTRA ARITONANG	SPARE	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D
44	RONI DAMATIUS	SPARE	N	N	N	N	OF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N
45	SELAMET ANUGRAH ADIT	SPARE	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D
46	MIFTACHUL JINAN	SPARE	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N
47	BAHARUDDIN	SPARE	D	D	D	D	D	N	N	N	OF	D	D	D	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D	D	D	N`
    },
    {
        name: 'excavator pit katipo',
        rawText: `1	DONNY MERDAHADI	EXCAVATOR 404	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N
2	WAHYUDI HERPANI	EXCAVATOR 404	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D
3	FEBRY SAPUTRA	EXCAVATOR 407	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
4	FAIZ SIROJUDIN	EXCAVATOR 407	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
5	ARDILES	EXCAVATOR 408	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
6	MOREL	EXCAVATOR 408	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N
7	REFFI ISMERLIND	EXCAVATOR 411	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
8	ALKADIF ISMAIL	EXCAVATOR 411	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
9	ANDES	EXCAVATOR 412	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D
10	EDY WARDIAN	EXCAVATOR 412	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	N
11	FAHROZI SAPUTRA	EXCAVATOR 414	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D
12	DONNI OKTANDI	EXCAVATOR 414	N	N	OFF	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N
13	JEFRINALDI	EXCAVATOR 425	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
14	AKIMIS	EXCAVATOR 425	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR
15	JEMSTAR SIHOMBING	EXCAVATOR 426	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
16	IRWAN	EXCAVATOR 426	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	CR	CR	CR
17	BOY SHANDI	EXCAVATOR 430	I	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N
18	DANI S. SITANGGANG	EXCAVATOR 430	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
19	FERNANDO SINAGA	EXCAVATOR 431	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D
20	IJON P SIMARMATA	EXCAVATOR 431	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	D	N	N	N	N	OFF	D	D	D	D	D	N	N	N
21	HENDRIK	EXCAVATOR 432	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
22	RAMLAN	EXCAVATOR 432	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N
23	SAFRIADI	EXCAVATOR 433	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N
24	ARDIANTO SITOMPUL	EXCAVATOR 433	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	CR	CR	CR
25	DEDEK SETIAWAN	EXCAVATOR 434	I	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
26	RIDUAN M.TOGATOROP	EXCAVATOR 434	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
27	ANDREAS HARAS	EXCAVATOR SPARE	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	CR	CR	CR	CR
28	SARJA	EXCAVATOR SPARE	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D
29	FEDO ALDI AMBARITA	EXCAVATOR SPARE	OFF	D	D	D	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N
30	JHONSON ADI PUTRA SINAGA	EXCAVATOR SPARE	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D
31	EDI WASITO	EXCAVATOR SPARE	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	N	N	N	N	CR	CR	CR	CR	CR	CR
32	HERIYANTO SIHOMBING	EXCAVATOR SPARE	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	CR
33	WAHYU SAPUTRA	EXCAVATOR SPARE	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	D	D	N	N	N	N	N	OFF	D	D	D	D	N	N	N	N	N	N
34	FIRMAN SYARIF	EXCAVATOR SPARE	N	N	N	OFF	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D
35	BAMBANG SUTRISNO	EXCAVATOR SPARE	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N
36	SAHAT SIREGAR	EXCAVATOR SPARE	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	CR`
    },
    {
        name: 'excavator pit sukamaju',
        rawText: `1	ANDIKA PRADIFTA	EXCAVATOR 402	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N
2	SUMPENA ISKANDAR	EXCAVATOR 402	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D
3	MULYANTO	EXCAVATOR 405	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N
4	AGUS FITRIAWAN	EXCAVATOR 405	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
5	ANDI KURNIAWAN	EXCAVATOR 406	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N
6	MARDIANSYAH	EXCAVATOR 406	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D
7	NURDANA	EXCAVATOR 409	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D
8	IKHSAN	EXCAVATOR 409	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	CR	CR	CR	CR	CR	CR
9	M. IKSAN	EXCAVATOR 410	N	OFF	D	D	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D
10	HARNO	EXCAVATOR 410	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N
11	EMDA MARYOGI	EXCAVATOR 416	CR	CR	CR	CR	I	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	D	N	N	N	OFF	D	D	D	D	D
12	ARIS ADINATA	EXCAVATOR 416	N	N	N	N	N	OFF	D	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N
13	LENDRA	EXCAVATOR 427	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N
14	ACCEPT LEAFY	EXCAVATOR 427	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D
15	MUHAMMAD SYAPRIZAL	EXCAVATOR 428	N	N	OFF	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D
16	JATRIADIN	EXCAVATOR 428	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N
17	SABARIONO	EXCAVATOR 429	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D
18	GUSNI SYAWAL	EXCAVATOR 429	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR
19	SUWITO	EXCAVATOR 506	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D	D
20	ANGGI JUANDA	EXCAVATOR 506	N	N	N	N	N	N	OFF	D	D	D	D	D	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N	N	N	N	N
21	AGUS SUSANTO	EXCAVATOR 507	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	CR	CR	CR	CR	CR
22	A YANI MILBAR	EXCAVATOR 507	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D
23	SYAHRI ROMADON	EXCAVATOR 508	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	N
24	OCTA MAULANA SYAHPUTRA	EXCAVATOR 508	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D
25	JON HENRI HALOHO	EXCAVATOR SPARE	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D
26	MUHAMMAD IQBAL.M	EXCAVATOR SPARE	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N
27	SANHERIB SITOMPUL	EXCAVATOR SPARE	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	N	N
28	SURIYANTO	EXCAVATOR SPARE	CR	CR	I	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	OFF	D	D	D	D	D	D
29	AMINULLAH HASIBUAN	EXCAVATOR SPARE	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N
30	EDWARD HAKIM	EXCAVATOR SPARE	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	N	N	N	N	OFF	D	D	D	D	D	D
31	HERIANTO	EXCAVATOR SPARE	N	N	N	OFF	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF
32	ERWIN SAPUTRA	EXCAVATOR SPARE	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	N	N	N	N	N	N
33	MARWAN	EXCAVATOR SPARE	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N
34	ASNAM	EXCAVATOR SPARE	D	D	D	D	D	D	D	D	D	D	N	N	N	N	N	N	N	OFF	D	D	D	D	D	D	N	N	N	N	N	N	N`
    },
    {
        name: 'GRADER',
        rawText: `1	NOPI	OPERATOR GRADER SANY 1	D	N	N	N	N	N	N	N	OF	D	D	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N
2	SANDI WINANJAR R	OPERATOR GRADER SANY 1	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	CR	CR	CR	CR
3	BAGIO	OPERATOR GRADER SANY 1	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D
4	WILLY	OPERATOR GRADER SANY 1	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N
5	RANGGA SAPUTRA	OPERATOR GRADER SANY 1	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	CR	CR	CR
6	RIZKI AKBAR	OPERATOR GRADER SANY 1	D	D	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	CR	I	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D
7	SUHARDI	OPERATOR GRADER 04	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N
8	MUHARDI	OPERATOR GRADER 04	D	D	D	D	N	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D
9	RIYO GUSRI	OPERATOR GRADER 03	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	N
10	YUDI EFENDI	OPERATOR GRADER 03	CR	CR	CR	CR	I	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	OF	D	D	D	D	D	D	D
11	ZAKI ILHAMDI	OPERATOR GRADER SPARE	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D
12	SUDARMONO	OPERATOR GRADER SPARE	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N
13	M ZULKIFLI	OPERATOR GRADER SPARE	D	N	N	N	N	N	N	OF	D	D	D	D	D	D	D	N	N	N	N	N	N	OF	D	D	D	D	D	N	N	N	N`
    }
];

// --- CONSTANTS ---
const Status = {
    DAY: 'D', NIGHT: 'N', OFF: 'OFF', CR: 'CR', I: 'I', ABSENT: 'ABSENT', SAKIT: 'SAKIT', IZIN: 'IZIN', CT: 'CT', SDT: 'SDT', BREAKDOWN: 'BREAKDOWN',
};

const STATUS_CONFIG = {
    [Status.DAY]: { label: 'Day', color: '#4ade80', className: 'bg-day' },
    [Status.NIGHT]: { label: 'Night', color: '#3b82f6', className: 'bg-night' },
    [Status.OFF]: { label: 'Off', color: '#9ca3af', className: 'bg-off' },
    [Status.CR]: { label: 'CR', color: '#f97316', className: 'bg-cr' },
    [Status.I]: { label: 'I', color: '#facc15', className: 'bg-i' },
    [Status.ABSENT]: { label: 'Absent', color: '#ef4444', className: 'bg-absent text-white' },
    [Status.SAKIT]: { label: 'Sakit', color: '#a855f7', className: 'bg-purple-500 text-white' },
    [Status.IZIN]: { label: 'Izin', color: '#ec4899', className: 'bg-pink-500 text-white' },
    [Status.CT]: { label: 'Cuti', color: '#14b8a6', className: 'bg-teal-500 text-white' },
    [Status.SDT]: { label: 'Sakit Tambang', color: '#8b5cf6', className: 'bg-violet-500 text-white' },
    [Status.BREAKDOWN]: { label: 'Breakdown', color: '#b91c1c', className: 'bg-red-800 text-white' },
    'OTHER': { label: 'Other', color: '#6b7280', className: 'bg-other text-white' },
};
const UNAVAILABLE_STATUSES = [Status.SAKIT, Status.IZIN, Status.CT, Status.SDT];

const app = Vue.createApp({
    data() {
        return {
            rosterGroups: [], // { name, rawText, parsedData }
            activeGroupIndex: 0,
            selectedDay: 1,
            selectedDate: '2025-10-01',
            // Overrides are now keyed by group index
            equipmentStatusOverrides: {}, // { [groupIndex]: { day: { equipment: { shift: { driver, originalDriver } } } } }
            driverStatusOverrides: {}, // { [groupIndex]: { day: { driverName: Status } } }
            breakdownStatus: {}, // { [groupIndex]: { day: { equipment: { shift: { date, time } } } } }
            standbyStatus: {}, // { [groupIndex]: { day: { equipment: { shift: true } } } }
            rosterFilter: '',
            activeShiftTab: 'day',
            showFullRoster: false,
            // Modal State
            isModalVisible: false,
            modalContent: {},
            modalFormData: {},
            // Constants to expose to template
            STATUS_CONFIG: STATUS_CONFIG,
            UNAVAILABLE_STATUSES: UNAVAILABLE_STATUSES,
            compatibleGroups: [
                ['DT pit Katipo', 'DT pit Sukamaju'],
                ['excavator pit katipo', 'excavator pit sukamaju']
            ],
        };
    },

    watch: {
        selectedDate(newDate) {
            if (newDate) this.selectedDay = parseInt(newDate.split('-')[2], 10);
        },
        selectedDay(newDay) {
            const dayString = String(newDay).padStart(2, '0');
            const newDate = `2025-10-${dayString}`;
            if (this.selectedDate !== newDate) this.selectedDate = newDate;
            this.saveState();
        },
        equipmentStatusOverrides: { handler: 'saveState', deep: true },
        driverStatusOverrides: { handler: 'saveState', deep: true },
        breakdownStatus: { handler: 'saveState', deep: true },
        standbyStatus: { handler: 'saveState', deep: true },
        activeShiftTab: 'saveState',
        activeGroupIndex: 'saveState',
    },

    computed: {
        activeGroup() {
            return this.rosterGroups[this.activeGroupIndex] || null;
        },
        dashboardData() {
            return this.calculateDashboardDataForIndex(this.activeGroupIndex);
        },
        activeShiftData() {
            if (!this.dashboardData) return {};
            const { operatingDay, operatingNight, standbyDay, standbyNight, breakdownDay, breakdownNight, availableSparesDay, availableSparesNight, reassignPoolDay, reassignPoolNight, unavailableDrivers } = this.dashboardData;
            
            return this.activeShiftTab === 'day' ? {
                shift: 'day', name: 'Day', operating: operatingDay, breakdown: breakdownDay, standby: standbyDay, spares: availableSparesDay, reassignPool: reassignPoolDay, unavailable: unavailableDrivers
            } : {
                shift: 'night', name: 'Night', operating: operatingNight, breakdown: breakdownNight, standby: standbyNight, spares: availableSparesNight, reassignPool: reassignPoolNight, unavailable: unavailableDrivers
            };
        },
        uniqueStandbyUnits() {
            if (!this.activeShiftData.standby) return 0;
            return new Set(this.activeShiftData.standby.map(u => u.equipment)).size;
        },
        filteredRosterDrivers() {
            if (!this.dashboardData?.allDrivers) return [];
            const filterText = this.rosterFilter.toLowerCase();
            if (!filterText) return this.dashboardData.allDrivers;
            return this.dashboardData.allDrivers.filter(driver =>
                driver.name.toLowerCase().includes(filterText) ||
                driver.equipment.toLowerCase().includes(filterText)
            );
        },
        allReassignedDriversToday() {
            const reassigned = new Set();
            const day = this.selectedDay;
            for (const groupIndex in this.equipmentStatusOverrides) {
                const dayOverrides = this.equipmentStatusOverrides[groupIndex][day];
                if (dayOverrides) {
                    Object.values(dayOverrides).forEach(equipment => {
                        if (equipment.day?.driver) reassigned.add(equipment.day.driver);
                        if (equipment.night?.driver) reassigned.add(equipment.night.driver);
                    });
                }
            }
            return reassigned;
        },
        crossGroupSparesPool() {
            if (!this.activeGroup) return { spares: [], reassign: [] };

            const currentGroupName = this.activeGroup.name;
            const shift = this.activeShiftTab;
            
            const compatibilitySet = this.compatibleGroups.find(set => set.includes(currentGroupName));
            
            const targetGroupNames = compatibilitySet || [currentGroupName];
            
            let combinedSpares = [];
            let combinedReassignPool = [];

            targetGroupNames.forEach(groupName => {
                const groupIndex = this.rosterGroups.findIndex(g => g.name === groupName);
                if (groupIndex === -1) return;

                const groupData = this.calculateDashboardDataForIndex(groupIndex);
                if (!groupData) return;
                
                const spares = (shift === 'day') ? groupData.availableSparesDay : groupData.availableSparesNight;
                const reassignPool = (shift === 'day') ? groupData.reassignPoolDay : groupData.reassignPoolNight;
                
                // Add a prefix for drivers from other pits for clarity in the UI.
                const prefix = groupIndex !== this.activeGroupIndex ? `(${groupName.split(' ').slice(-1)[0]}) ` : '';
                
                spares.forEach(driver => combinedSpares.push({ name: driver, prefixedName: `${prefix}${driver}` }));
                reassignPool.forEach(driver => combinedReassignPool.push({ name: driver, prefixedName: `${prefix}${driver}` }));
            });

            const uniqueSpares = [...new Map(combinedSpares.map(item => [item.name, item])).values()];
            const uniqueReassign = [...new Map(combinedReassignPool.map(item => [item.name, item])).values()];
            
            return { spares: uniqueSpares, reassign: uniqueReassign };
        }
    },

    methods: {
        saveState() {
            try {
                const stateToSave = { 
                    activeGroupIndex: this.activeGroupIndex, selectedDay: this.selectedDay,
                    equipmentStatusOverrides: this.equipmentStatusOverrides, driverStatusOverrides: this.driverStatusOverrides,
                    breakdownStatus: this.breakdownStatus, standbyStatus: this.standbyStatus, activeShiftTab: this.activeShiftTab,
                };
                localStorage.setItem('rosterAppState', JSON.stringify(stateToSave));
            } catch (e) { console.error("Failed to save state", e); }
        },
        loadState() {
            try {
                const savedStateJSON = localStorage.getItem('rosterAppState');
                if (savedStateJSON) { 
                    const savedState = JSON.parse(savedStateJSON);
                    Object.assign(this, savedState); 
                }
            } catch (e) { console.error("Failed to load state", e); }
        },
        initializeData() {
            this.rosterGroups = INITIAL_ROSTERS.map(group => ({
                ...group,
                parsedData: this.parseRosterData(group.rawText)
            }));
        },
        parseRosterData(text) {
            const lines = text.trim().split('\n');
            const drivers = [];
            lines.forEach(line => {
                const parts = line.split('\t').map(p => p.trim());
                if (parts.length > 3 && !isNaN(parseInt(parts[0], 10))) {
                    drivers.push({
                        id: parseInt(parts[0], 10), name: parts[1], equipment: parts[2], 
                        schedule: parts.slice(3).map(s => (s === 'OF' ? 'OFF' : s))
                    });
                }
            });
            return drivers.length > 0 ? { sites: { 'default': drivers } } : null;
        },
        resetAllData() {
             if(confirm('Are you sure you want to reset all data? This will clear all changes and reload the initial rosters.')) {
                localStorage.removeItem('rosterAppState');
                window.location.reload();
            }
        },
        getOverrideForCurrentState(overrideState) {
            return overrideState[this.activeGroupIndex] || {};
        },
        clearAssignment(equipment, shift) {
            const overrides = this.getOverrideForCurrentState(this.equipmentStatusOverrides);
            if (overrides[this.selectedDay]?.[equipment]) {
                delete overrides[this.selectedDay][equipment][shift];
                 if (Object.keys(overrides[this.selectedDay][equipment]).length === 0) {
                     delete overrides[this.selectedDay][equipment];
                }
            }
        },
        clearDriverStatus(driver) {
            const overrides = this.getOverrideForCurrentState(this.driverStatusOverrides);
            if (overrides[this.selectedDay]) {
                delete overrides[this.selectedDay][driver];
            }
        },
        clearBreakdown(equipment, shift) {
            const overrides = this.getOverrideForCurrentState(this.breakdownStatus);
            if (overrides[this.selectedDay]?.[equipment]?.[shift]) {
                delete overrides[this.selectedDay][equipment][shift];
                if (Object.keys(overrides[this.selectedDay][equipment]).length === 0) {
                     delete overrides[this.selectedDay][equipment];
                }
            }
        },
        clearStandby(equipment, shift) {
            const overrides = this.getOverrideForCurrentState(this.standbyStatus);
            if (overrides[this.selectedDay]?.[equipment]?.[shift]) {
                delete overrides[this.selectedDay][equipment][shift];
                if (Object.keys(overrides[this.selectedDay][equipment]).length === 0) {
                     delete overrides[this.selectedDay][equipment];
                }
            }
        },
        openModal(type, data) {
            this.modalFormData = {}; let title = '';
            switch (type) {
                case 'manageUnit': title = `Manage Unit: ${data.equipment}`; this.modalContent = { type, title, data, view: 'main' }; break;
                case 'manageDriver': title = `Update Status: ${data.driverName}`; this.modalContent = { type, title, data, view: 'main' }; break;
                case 'manualBreakdown':
                    title = 'Report Manual Breakdown';
                    this.modalFormData = {
                        date: new Date().toISOString().split('T')[0],
                        time: new Date().toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' })
                    };
                    this.modalContent = { type, title, data, view: 'form' };
                    break;
            }
            this.isModalVisible = true;
        },
        setModalView(view) {
            if (view === 'setBreakdown') {
                this.modalFormData = {
                    date: new Date().toISOString().split('T')[0],
                    time: new Date().toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' })
                };
            }
            this.modalContent.view = view;
        },
        setUnitStandby(equipment, shift) {
            this.clearAssignment(equipment, shift); this.clearBreakdown(equipment, shift);
            const groupIndex = this.activeGroupIndex; const day = this.selectedDay;

            const newStatus = JSON.parse(JSON.stringify(this.standbyStatus));
            if (!newStatus[groupIndex]) newStatus[groupIndex] = {};
            if (!newStatus[groupIndex][day]) newStatus[groupIndex][day] = {};
            if (!newStatus[groupIndex][day][equipment]) newStatus[groupIndex][day][equipment] = {};
            newStatus[groupIndex][day][equipment][shift] = true;
            this.standbyStatus = newStatus;

            this.closeModal();
        },
        closeModal() { this.isModalVisible = false; this.modalContent = {}; this.modalFormData = {}; },
        handleModalConfirm() {
            const { type, data, view } = this.modalContent;
            const groupIndex = this.activeGroupIndex; const day = this.selectedDay;
            
            if (type === 'manageUnit') {
                const { equipment, shift, originalDriver } = data;
                switch (view) {
                    case 'reassignDriver': case 'assignSpare':
                        const newDriver = this.modalFormData.selectedDriver; if (!newDriver) return alert("Please select a driver.");
                        this.clearBreakdown(equipment, shift); this.clearStandby(equipment, shift);
                        
                        const newOverrides = JSON.parse(JSON.stringify(this.equipmentStatusOverrides));
                        if (!newOverrides[groupIndex]) newOverrides[groupIndex] = {};
                        if (!newOverrides[groupIndex][day]) newOverrides[groupIndex][day] = {};
                        if (!newOverrides[groupIndex][day][equipment]) newOverrides[groupIndex][day][equipment] = {};
                        newOverrides[groupIndex][day][equipment][shift] = { driver: newDriver, originalDriver };
                        this.equipmentStatusOverrides = newOverrides;
                        break;
                    case 'setBreakdown':
                        const { date, time } = this.modalFormData; if (!date || !time) return alert("Please provide both a start date and time.");
                        this.clearAssignment(equipment, shift); this.clearStandby(equipment, shift);

                        const newBreakdowns = JSON.parse(JSON.stringify(this.breakdownStatus));
                        if (!newBreakdowns[groupIndex]) newBreakdowns[groupIndex] = {};
                        if (!newBreakdowns[groupIndex][day]) newBreakdowns[groupIndex][day] = {};
                        if (!newBreakdowns[groupIndex][day][equipment]) newBreakdowns[groupIndex][day][equipment] = {};
                        newBreakdowns[groupIndex][day][equipment][shift] = { date, time };
                        this.breakdownStatus = newBreakdowns;
                        break;
                }
            } else if (type === 'manageDriver') {
                const { driverName } = data; const newStatus = this.modalFormData.newStatus;
                if (!newStatus) return alert("Please select a status.");

                const newDriverOverrides = JSON.parse(JSON.stringify(this.driverStatusOverrides));
                if (!newDriverOverrides[groupIndex]) newDriverOverrides[groupIndex] = {};
                if (!newDriverOverrides[groupIndex][day]) newDriverOverrides[groupIndex][day] = {};
                newDriverOverrides[groupIndex][day][driverName] = newStatus;
                this.driverStatusOverrides = newDriverOverrides;

            } else if (type === 'manualBreakdown') {
                const { equipment, date, time } = this.modalFormData;
                const { shift } = data;
                if (!equipment || !date || !time) return alert("Please provide all details for the breakdown.");
                
                const newBreakdowns = JSON.parse(JSON.stringify(this.breakdownStatus));
                const unitName = equipment.toUpperCase().trim();
                if (!newBreakdowns[groupIndex]) newBreakdowns[groupIndex] = {};
                if (!newBreakdowns[groupIndex][day]) newBreakdowns[groupIndex][day] = {};
                if (!newBreakdowns[groupIndex][day][unitName]) newBreakdowns[groupIndex][day][unitName] = {};
                newBreakdowns[groupIndex][day][unitName][shift] = { date, time };
                this.breakdownStatus = newBreakdowns;
            }
            this.closeModal();
        },
        calculateDashboardDataForIndex(groupIndex) {
            const group = this.rosterGroups[groupIndex];
            if (!group || !group.parsedData) return null;

            const { sites } = group.parsedData;
            const allDrivers = Object.values(sites).flat();
            
            const dayIndex = this.selectedDay - 1;
            const todayOverrides = (this.equipmentStatusOverrides[groupIndex] || {})[this.selectedDay] || {};
            const todayDriverOverrides = (this.driverStatusOverrides[groupIndex] || {})[this.selectedDay] || {};
            const todayBreakdowns = (this.breakdownStatus[groupIndex] || {})[this.selectedDay] || {};
            const todayStandbys = (this.standbyStatus[groupIndex] || {})[this.selectedDay] || {};

            const primaryDrivers = allDrivers.filter(d => !d.equipment.toLowerCase().includes('spare'));
            const spareDrivers = allDrivers.filter(d => d.equipment.toLowerCase().includes('spare'));
            
            const equipmentGroups = primaryDrivers.reduce((acc, driver) => {
                acc[driver.equipment] = acc[driver.equipment] || [];
                acc[driver.equipment].push(driver);
                return acc;
            }, {});

            let operatingDay = [], operatingNight = [];
            let standbyDay = [], standbyNight = [];
            let breakdownDay = [], breakdownNight = [];
            const driversFreedByBreakdownOrStandby = { day: new Set(), night: new Set() };

            const reassignedDrivers = this.allReassignedDriversToday;
            
            // Handle rostered equipment
            for (const equipment in equipmentGroups) {
                const drivers = equipmentGroups[equipment];
                let dayDriver = drivers.find(d => d.schedule[dayIndex] === Status.DAY);
                let nightDriver = drivers.find(d => d.schedule[dayIndex] === Status.NIGHT);

                if (dayDriver && reassignedDrivers.has(dayDriver.name) && !todayOverrides[equipment]?.day) dayDriver = undefined;
                if (nightDriver && reassignedDrivers.has(nightDriver.name) && !todayOverrides[equipment]?.night) nightDriver = undefined;

                const dayOverride = todayOverrides[equipment]?.day;
                const nightOverride = todayOverrides[equipment]?.night;
                const dayBreakdown = todayBreakdowns[equipment]?.day;
                const nightBreakdown = todayBreakdowns[equipment]?.night;
                const dayStandby = todayStandbys[equipment]?.day;
                const nightStandby = todayStandbys[equipment]?.night;

                // Day Shift
                const dayIsPresent = dayDriver && !todayDriverOverrides[dayDriver.name];
                const dayOperator = dayOverride?.driver || (dayIsPresent ? dayDriver.name : null);
                if (dayBreakdown) {
                    breakdownDay.push({ equipment, driver: dayOperator, ...dayBreakdown });
                    if (dayOperator) driversFreedByBreakdownOrStandby.day.add(dayOperator);
                } else if (dayStandby) {
                    standbyDay.push({ equipment, drivers });
                    if (dayOperator) driversFreedByBreakdownOrStandby.day.add(dayOperator);
                } else if (dayOverride) {
                    operatingDay.push({ equipment, driver: dayOverride.driver, originalDriver: dayOverride.originalDriver });
                } else if (dayIsPresent) {
                    operatingDay.push({ equipment, driver: dayDriver.name });
                } else {
                    standbyDay.push({ equipment, drivers });
                }

                // Night Shift
                const nightIsPresent = nightDriver && !todayDriverOverrides[nightDriver.name];
                const nightOperator = nightOverride?.driver || (nightIsPresent ? nightDriver.name : null);
                if (nightBreakdown) {
                    breakdownNight.push({ equipment, driver: nightOperator, ...nightBreakdown });
                    if (nightOperator) driversFreedByBreakdownOrStandby.night.add(nightOperator);
                } else if (nightStandby) {
                    standbyNight.push({ equipment, drivers });
                    if (nightOperator) driversFreedByBreakdownOrStandby.night.add(nightOperator);
                } else if (nightOverride) {
                    operatingNight.push({ equipment, driver: nightOverride.driver, originalDriver: nightOverride.originalDriver });
                } else if (nightIsPresent) {
                    operatingNight.push({ equipment, driver: nightDriver.name });
                } else {
                    standbyNight.push({ equipment, drivers });
                }
            }
            
            // Handle manually added breakdowns
            for (const equipment in todayBreakdowns) {
                if (!equipmentGroups[equipment]) { // If it's not a rostered unit
                    if (todayBreakdowns[equipment].day) {
                        breakdownDay.push({ equipment, driver: null, ...todayBreakdowns[equipment].day });
                    }
                    if (todayBreakdowns[equipment].night) {
                        breakdownNight.push({ equipment, driver: null, ...todayBreakdowns[equipment].night });
                    }
                }
            }

            const freedPrimaryDrivers = { day: new Set(), night: new Set() };
            Object.values(todayOverrides).forEach(equip => {
                if (equip.day?.originalDriver && equip.day.driver !== equip.day.originalDriver) {
                    freedPrimaryDrivers.day.add(equip.day.originalDriver);
                }
                if (equip.night?.originalDriver && equip.night.driver !== equip.night.originalDriver) {
                    freedPrimaryDrivers.night.add(equip.night.originalDriver);
                }
            });

            const baseSparesDay = spareDrivers
                .filter(d => d.schedule[dayIndex] === Status.DAY && !reassignedDrivers.has(d.name) && !todayDriverOverrides[d.name])
                .map(d => d.name);
            const baseSparesNight = spareDrivers
                .filter(d => d.schedule[dayIndex] === Status.NIGHT && !reassignedDrivers.has(d.name) && !todayDriverOverrides[d.name])
                .map(d => d.name);

            const allPotentialFreedDay = [...Array.from(freedPrimaryDrivers.day), ...Array.from(driversFreedByBreakdownOrStandby.day)];
            const allPotentialFreedNight = [...Array.from(freedPrimaryDrivers.night), ...Array.from(driversFreedByBreakdownOrStandby.night)];
            
            const filteredFreedDay = allPotentialFreedDay.filter(driver => !reassignedDrivers.has(driver) && !todayDriverOverrides[driver]);
            const filteredFreedNight = allPotentialFreedNight.filter(driver => !reassignedDrivers.has(driver) && !todayDriverOverrides[driver]);
            
            const availableSparesDay = [...new Set([...baseSparesDay, ...filteredFreedDay])];
            const availableSparesNight = [...new Set([...baseSparesNight, ...filteredFreedNight])];

            const unavailableDrivers = allDrivers.filter(d => todayDriverOverrides[d.name]).map(d => ({ name: d.name, status: todayDriverOverrides[d.name] }));

            const reassignPoolDay = [...availableSparesDay, ...operatingDay.filter(op => !op.originalDriver).map(op => op.driver)];
            const reassignPoolNight = [...availableSparesNight, ...operatingNight.filter(op => !op.originalDriver).map(op => op.driver)];
            
            return {
                allDrivers, operatingDay, operatingNight, standbyDay, standbyNight, breakdownDay, breakdownNight,
                availableSparesDay, availableSparesNight, reassignPoolDay, reassignPoolNight,
                unavailableDrivers
            };
        },
        getExportData() {
            if (!this.dashboardData) return {};
            const { operating, breakdown, standby, spares, unavailable } = this.activeShiftData;
            const uniqueStandby = [...new Map(standby.map(u => [u.equipment, u])).values()];

            return {
                "Operating": operating.map(u => ({ Equipment: u.equipment, Driver: u.driver })),
                "Breakdown": breakdown.map(u => ({ Equipment: u.equipment, Driver: u.driver || 'N/A', Since: `${u.date} ${u.time}` })),
                "Standby": uniqueStandby.map(u => ({ Equipment: u.equipment, "Primary Driver(s)": u.drivers.map(d => d.name).join(', ') })),
                "Available Spares": spares.map(name => ({ "Driver Name": name })),
                "Unavailable Drivers": unavailable.map(d => ({ "Driver Name": d.name, Status: this.STATUS_CONFIG[d.status]?.label || d.status }))
            };
        },
        exportXLSX() {
            const dataToExport = this.getExportData();
            if (Object.keys(dataToExport).length === 0) return;

            const wb = XLSX.utils.book_new();
            for (const sheetName in dataToExport) {
                if (dataToExport[sheetName].length > 0) {
                    const ws = XLSX.utils.json_to_sheet(dataToExport[sheetName]);
                    XLSX.utils.book_append_sheet(wb, ws, sheetName);
                }
            }
            const shiftName = this.activeShiftTab;
            XLSX.writeFile(wb, `${this.activeGroup.name}_${shiftName}_${this.selectedDate}.xlsx`);
        },
        addPdfHeaderAndFooter(doc, title, shift, date) {
            const pageCount = doc.internal.getNumberOfPages();
            const pageWidth = doc.internal.pageSize.width || doc.internal.pageSize.getWidth();
            const pageHeight = doc.internal.pageSize.height || doc.internal.pageSize.getHeight();

            for (let i = 1; i <= pageCount; i++) {
                doc.setPage(i);
                
                // Header
                doc.setFillColor(31, 41, 55); // gray-800
                doc.rect(0, 0, pageWidth, 28, 'F');
                doc.setFontSize(16);
                doc.setFont('helvetica', 'bold');
                doc.setTextColor(255, 255, 255);
                doc.text(title, pageWidth / 2, 14, { align: 'center' });
                doc.setFontSize(10);
                doc.setFont('helvetica', 'normal');
                doc.text(`Shift: ${shift} | Tanggal: ${date}`, pageWidth / 2, 22, { align: 'center' });

                // Footer
                doc.setFontSize(8);
                doc.setTextColor(150);
                doc.text(`Halaman ${i} dari ${pageCount}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
            }
        },
        exportPDF() {
            if (!this.dashboardData) return;

            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const { operating, breakdown, standby, spares, unavailable } = this.activeShiftData;
            const shiftName = this.activeShiftTab.charAt(0).toUpperCase() + this.activeShiftTab.slice(1);
            const selectedDateStr = new Date(this.selectedDate).toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric' });
            const uniqueStandbyUnits = [...new Map(standby.map(u => [u.equipment, u])).values()];
            let finalY = 35;

            // PAGE 1: Unit Status
            doc.setFontSize(12);
            doc.setFont('helvetica', 'bold');
            doc.text('Ringkasan Status', 14, finalY);
            finalY += 5;
            const summaryData = [
                ['Unit Beroperasi', operating.length],
                ['Unit Standby', uniqueStandbyUnits.length],
                ['Unit Breakdown', breakdown.length]
            ];
             doc.autoTable({
                startY: finalY,
                body: summaryData,
                theme: 'plain',
                styles: { fontSize: 10 },
                columnStyles: { 0: { fontStyle: 'bold' } }
            });
            finalY = doc.lastAutoTable.finalY + 10;
            
            if (operating.length > 0) {
                doc.autoTable({
                    startY: finalY, head: [['Unit Beroperasi', 'Driver']], body: operating.map(u => [u.equipment, u.driver]),
                    theme: 'grid', headStyles: { fillColor: [22, 163, 74] }, didDrawPage: () => finalY = doc.lastAutoTable.finalY
                });
            }

            if (breakdown.length > 0) {
                 doc.autoTable({
                    startY: doc.lastAutoTable.finalY + 8, head: [['Unit Breakdown', 'Driver', 'Waktu Breakdown']], body: breakdown.map(u => [u.equipment, u.driver || 'N/A', `${u.date} ${u.time}`]),
                    theme: 'grid', headStyles: { fillColor: [220, 38, 38] }, didDrawPage: () => finalY = doc.lastAutoTable.finalY
                });
            }
            
            if (uniqueStandbyUnits.length > 0) {
                 doc.autoTable({
                    startY: doc.lastAutoTable.finalY + 8, head: [['Unit Standby', 'Primary Driver(s)']], body: uniqueStandbyUnits.map(u => [u.equipment, u.drivers.map(d => d.name).join(', ')]),
                    theme: 'grid', headStyles: { fillColor: [217, 119, 6] }, didDrawPage: () => finalY = doc.lastAutoTable.finalY
                });
            }

            // PAGE 2: Personnel
            doc.addPage();
            finalY = 35;
            if (spares.length > 0) {
                 doc.autoTable({
                    startY: finalY, head: [['Personil Siap Bekerja']], body: spares.map(name => [name]),
                    theme: 'grid', headStyles: { fillColor: [34, 197, 94] }, didDrawPage: () => finalY = doc.lastAutoTable.finalY
                });
            }
            if (unavailable.length > 0) {
                doc.autoTable({
                    startY: doc.lastAutoTable.finalY + 8, head: [['Personil Tidak Hadir', 'Status']], body: unavailable.map(d => [d.name, this.STATUS_CONFIG[d.status]?.label || d.status]),
                    theme: 'grid', headStyles: { fillColor: [249, 115, 22] }, didDrawPage: () => finalY = doc.lastAutoTable.finalY
                });
            }

            this.addPdfHeaderAndFooter(doc, `Laporan Harian - ${this.activeGroup.name}`, shiftName, selectedDateStr);
            doc.save(`${this.activeGroup.name}_${this.activeShiftTab}_${this.selectedDate}.pdf`);
        },

        exportAllPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            const selectedDateStr = new Date(this.selectedDate).toLocaleDateString('id-ID', { day: 'numeric', month: 'long', year: 'numeric' });
            const shiftName = this.activeShiftTab.charAt(0).toUpperCase() + this.activeShiftTab.slice(1);

            const allDataByCategory = {};
            const allSpares = new Set();
            let allUnavailable = [];

            const categorizeUnit = (groupName) => {
                const lower = groupName.toLowerCase();
                if (lower.includes('dt')) return 'DT';
                if (lower.includes('dozer')) return 'Dozer';
                if (lower.includes('excavator')) return 'Excavator';
                if (lower.includes('grader')) return 'Grader';
                return 'Other';
            };

            this.rosterGroups.forEach((group, index) => {
                const data = this.calculateDashboardDataForIndex(index);
                if (!data) return;
                
                const shiftData = this.activeShiftTab === 'day' 
                    ? { operating: data.operatingDay, breakdown: data.breakdownDay, standby: data.standbyDay, spares: data.availableSparesDay, unavailable: data.unavailableDrivers } 
                    : { operating: data.operatingNight, breakdown: data.breakdownNight, standby: data.standbyNight, spares: data.availableSparesNight, unavailable: data.unavailableDrivers };

                const category = categorizeUnit(group.name);
                if (!allDataByCategory[category]) {
                    allDataByCategory[category] = { operating: [], breakdown: [], standby: [] };
                }
                allDataByCategory[category].operating.push(...shiftData.operating.map(u => ({...u, group: group.name})));
                allDataByCategory[category].breakdown.push(...shiftData.breakdown.map(u => ({...u, group: group.name})));
                allDataByCategory[category].standby.push(...shiftData.standby.map(u => ({...u, group: group.name})));
                
                shiftData.spares.forEach(name => allSpares.add(name));
                allUnavailable.push(...shiftData.unavailable);
            });
            
            const allOperating = Object.values(allDataByCategory).flatMap(c => c.operating);
            const allBreakdown = Object.values(allDataByCategory).flatMap(c => c.breakdown);
            const allStandby = Object.values(allDataByCategory).flatMap(c => c.standby);
            
            // PAGE 1: Global Summary & Operating
            let finalY = 35;
            doc.setFontSize(12); doc.setFont('helvetica', 'bold'); doc.text('Ringkasan Global', 14, finalY); finalY += 5;
            const summaryData = [
                ['Unit Beroperasi', allOperating.length],
                ['Unit Standby', [...new Map(allStandby.map(u => [u.equipment, u])).values()].length],
                ['Unit Breakdown', allBreakdown.length],
                ['Personil Siap Bekerja', allSpares.size],
                ['Personil Tidak Hadir', allUnavailable.length],
            ];
            doc.autoTable({ startY: finalY, body: summaryData, theme: 'plain', styles: { fontSize: 10 }, columnStyles: { 0: { fontStyle: 'bold' } } });
            finalY = doc.lastAutoTable.finalY + 10;
            if (allOperating.length > 0) {
                 doc.autoTable({
                    startY: finalY, head: [['Unit Beroperasi', 'Driver', 'Grup']], body: allOperating.map(u => [u.equipment, u.driver, u.group]),
                    theme: 'grid', headStyles: { fillColor: [22, 163, 74] },
                });
            }

            // Category Pages
            Object.keys(allDataByCategory).sort().forEach(category => {
                const data = allDataByCategory[category];
                const uniqueStandby = [...new Map(data.standby.map(u => [u.equipment, u])).values()];
                if (data.breakdown.length === 0 && uniqueStandby.length === 0) return;

                doc.addPage();
                finalY = 35;
                doc.setFontSize(12); doc.setFont('helvetica', 'bold'); doc.text(`Ringkasan Kategori: ${category}`, 14, finalY); finalY += 5;
                const catSummary = [
                    ['Beroperasi', data.operating.length],
                    ['Standby', uniqueStandby.length],
                    ['Breakdown', data.breakdown.length],
                ];
                doc.autoTable({ startY: finalY, body: catSummary, theme: 'plain', styles: { fontSize: 10 }, columnStyles: { 0: { fontStyle: 'bold' } } });
                finalY = doc.lastAutoTable.finalY + 10;
                
                if (data.breakdown.length > 0) {
                    doc.autoTable({
                       startY: finalY, head: [['Unit Breakdown', 'Driver', 'Grup', 'Waktu']], body: data.breakdown.map(u => [u.equipment, u.driver || 'N/A', u.group, `${u.date} ${u.time}`]),
                       theme: 'grid', headStyles: { fillColor: [220, 38, 38] },
                   });
                   finalY = doc.lastAutoTable.finalY + 8;
                }
                
                if (uniqueStandby.length > 0) {
                     doc.autoTable({
                       startY: finalY, head: [['Unit Standby', 'Primary Driver(s)', 'Grup']], body: uniqueStandby.map(u => [u.equipment, u.drivers.map(d => d.name).join(', '), u.group]),
                       theme: 'grid', headStyles: { fillColor: [217, 119, 6] },
                   });
                }
            });

            // Final Personnel Page
            doc.addPage();
            finalY = 35;
            const sparesArray = Array.from(allSpares);
            if (sparesArray.length > 0) {
                doc.autoTable({
                   startY: finalY, head: [['Personil Siap Bekerja (Gabungan)']], body: sparesArray.map(name => [name]),
                   theme: 'grid', headStyles: { fillColor: [34, 197, 94] },
               });
               finalY = doc.lastAutoTable.finalY + 8;
            }

            const uniqueUnavailable = [...new Map(allUnavailable.map(item => [item.name, item])).values()];
            if (uniqueUnavailable.length > 0) {
                 doc.autoTable({
                   startY: finalY, head: [['Personil Tidak Hadir (Gabungan)', 'Status']], body: uniqueUnavailable.map(d => [d.name, this.STATUS_CONFIG[d.status]?.label || d.status]),
                   theme: 'grid', headStyles: { fillColor: [249, 115, 22] },
               });
            }

            this.addPdfHeaderAndFooter(doc, 'Laporan Harian Gabungan', shiftName, selectedDateStr);
            doc.save(`Laporan_Gabungan_${this.activeShiftTab}_${this.selectedDate}.pdf`);
        }
    },
    
    mounted() {
        this.loadState();
        this.initializeData();
    },

    template: `
    <div class="container mx-auto p-4 sm:p-6">
      <div v-if="rosterGroups.length === 0" class="text-center py-10">
        <p class="text-gray-500">Loading roster data...</p>
      </div>
      <template v-else>
        <div class="animate-fade-in">
          <header class="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
              <div class="text-center sm:text-left">
                <h1 class="text-2xl sm:text-3xl font-bold text-gray-800 dark:text-white">Manpower & Equipment Dashboard</h1>
                <p class="text-gray-600 dark:text-gray-400">{{ activeGroup.name }} Roster</p>
              </div>
              <button @click="resetAllData" class="bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-bold py-2 px-4 rounded-lg text-sm transition-colors">
                  Reset All Data
              </button>
          </header>

            <!-- Roster Group Tabs -->
            <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
                <nav class="-mb-px flex space-x-4 overflow-x-auto" aria-label="Tabs">
                    <button v-for="(group, index) in rosterGroups" :key="group.name" @click="activeGroupIndex = index" 
                        class="whitespace-nowrap py-3 px-2 border-b-2 font-medium text-sm transition-colors"
                        :class="activeGroupIndex === index ? 'border-blue-500 text-blue-600 dark:text-blue-400' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'">
                        {{ group.name }}
                    </button>
                </nav>
            </div>

          <div class="bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-xl shadow-lg">
              <div class="flex flex-col md:flex-row justify-between md:items-center gap-4 mb-6">
                  <div class="w-full md:w-1/2">
                    <label for="day-selector" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Select Date (October 2025):</label>
                    <input id="day-selector" type="date" v-model="selectedDate" min="2025-10-01" max="2025-10-31" class="w-full p-2 border rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300">
                  </div>
                  <div class="flex gap-2 self-end">
                      <button @click="exportXLSX" title="Export Current Tab to XLSX" class="bg-green-100 dark:bg-green-900/50 text-green-700 dark:text-green-300 hover:bg-green-200 dark:hover:bg-green-800 font-bold p-2 rounded-lg text-sm transition-colors">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M2 3a1 1 0 011-1h14a1 1 0 011 1v14a1 1 0 01-1-1H3a1 1 0 01-1-1V3zm2 2v2h12V5H4zm0 4v2h12V9H4zm0 4v2h12v-2H4z" /></svg>
                      </button>
                      <button @click="exportPDF" title="Export Current Tab to PDF" class="bg-red-100 dark:bg-red-900/50 text-red-700 dark:text-red-300 hover:bg-red-200 dark:hover:bg-red-800 font-bold p-2 rounded-lg text-sm transition-colors">
                           <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a1 1 0 110 2h-3v-2a1 1 0 00-1-1H9a1 1 0 00-1 1v2H5a1 1 0 110-2V4zm2 0v4h8V4H6zm0 6v4h8v-4H6z" clip-rule="evenodd" /></svg>
                      </button>
                      <button @click="exportAllPDF" title="Export All Tabs to PDF" class="bg-indigo-100 dark:bg-indigo-900/50 text-indigo-700 dark:text-indigo-300 hover:bg-indigo-200 dark:hover:bg-indigo-800 font-bold p-2 rounded-lg text-sm transition-colors">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>
                      </button>
                  </div>
              </div>

              <!-- Shift Tabs -->
              <div class="border-b border-gray-200 dark:border-gray-700">
                  <nav class="-mb-px flex space-x-4" aria-label="Tabs">
                      <button @click="activeShiftTab = 'day'" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" :class="activeShiftTab === 'day' ? 'border-blue-500 text-blue-600 dark:text-blue-400' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'">Day Shift</button>
                      <button @click="activeShiftTab = 'night'" class="whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" :class="activeShiftTab === 'night' ? 'border-blue-500 text-blue-600 dark:text-blue-400' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'">Night Shift</button>
                  </nav>
              </div>

              <!-- Summary Cards -->
               <div v-if="dashboardData" class="grid grid-cols-2 md:grid-cols-4 gap-4 my-6">
                  <div class="bg-blue-50 dark:bg-blue-900/30 p-4 rounded-lg"><p class="text-sm text-blue-800 dark:text-blue-300">Operating</p><p class="text-2xl font-bold text-blue-900 dark:text-blue-200">{{ activeShiftData.operating?.length || 0 }}</p></div>
                  <div class="bg-red-50 dark:bg-red-900/30 p-4 rounded-lg"><p class="text-sm text-red-800 dark:text-red-300">Breakdown</p><p class="text-2xl font-bold text-red-900 dark:text-red-200">{{ activeShiftData.breakdown?.length || 0 }}</p></div>
                  <div class="bg-yellow-50 dark:bg-yellow-900/30 p-4 rounded-lg"><p class="text-sm text-yellow-800 dark:text-yellow-300">Standby</p><p class="text-2xl font-bold text-yellow-900 dark:text-yellow-200">{{ uniqueStandbyUnits }}</p></div>
                  <div class="bg-green-50 dark:bg-green-900/30 p-4 rounded-lg"><p class="text-sm text-green-800 dark:text-green-300">Spares</p><p class="text-2xl font-bold text-green-900 dark:text-green-200">{{ activeShiftData.spares?.length || 0 }}</p></div>
              </div>
              
              <!-- Content Tables -->
              <div v-if="dashboardData" class="space-y-6">
                <!-- Operating Table -->
                <div>
                  <h4 class="font-semibold text-lg text-gray-700 dark:text-gray-300 mb-2">Operating ({{ activeShiftData.operating?.length || 0 }})</h4>
                  <div class="overflow-x-auto rounded-lg shadow-sm border dark:border-gray-700">
                    <table class="min-w-full text-sm">
                        <thead class="bg-gray-50 dark:bg-gray-700/50"><tr class="text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase">
                            <th class="p-3">Equipment</th><th class="p-3">Driver</th>
                        </tr></thead>
                        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                          <tr v-if="!activeShiftData.operating || activeShiftData.operating.length === 0"><td colspan="2" class="p-4 text-center text-gray-500">No units operating.</td></tr>
                          <tr v-for="unit in activeShiftData.operating" :key="unit.equipment" class="hover:bg-gray-50 dark:hover:bg-gray-700/50">
                              <td class="p-3 font-medium"><button @click="openModal('manageUnit', { equipment: unit.equipment, shift: activeShiftData.shift, originalDriver: unit.originalDriver, status: 'operating' })" class="text-blue-600 hover:underline">{{ unit.equipment }}</button></td>
                              <td class="p-3"><button @click="openModal('manageDriver', { driverName: unit.driver, shift: activeShiftData.shift })" class="text-blue-600 hover:underline">{{ unit.driver }}</button><span v-if="unit.originalDriver" class="text-xs text-green-500 font-semibold ml-2">(Spare)</span></td>
                          </tr>
                        </tbody>
                    </table>
                  </div>
                </div>
                <!-- Breakdown Table -->
                <div v-if="activeShiftData.breakdown">
                  <h4 class="font-semibold text-lg text-red-600 dark:text-red-400 mb-2 flex items-center gap-2">
                    <span>Breakdown ({{ activeShiftData.breakdown.length }})</span>
                    <button @click="openModal('manualBreakdown', { shift: activeShiftData.shift })" title="Report Manual Breakdown" class="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 p-1 rounded-full hover:bg-red-100 dark:hover:bg-red-900/50 transition-colors">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" /></svg>
                    </button>
                  </h4>
                  <div class="overflow-x-auto rounded-lg shadow-sm border border-red-200 dark:border-red-800">
                    <table class="min-w-full text-sm">
                      <thead class="bg-red-50 dark:bg-red-900/30"><tr class="text-left text-xs font-semibold text-red-700 dark:text-red-300 uppercase">
                          <th class="p-3">Equipment</th><th class="p-3">Driver</th><th class="p-3">Since</th>
                      </tr></thead>
                      <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        <tr v-if="activeShiftData.breakdown.length === 0"><td colspan="3" class="p-4 text-center text-gray-500">No units in breakdown.</td></tr>
                        <tr v-for="unit in activeShiftData.breakdown" :key="unit.equipment" class="hover:bg-red-50 dark:hover:bg-red-900/20">
                          <td class="p-3 font-medium"><button @click="openModal('manageUnit', { equipment: unit.equipment, shift: activeShiftData.shift, status: 'breakdown' })" class="text-blue-600 hover:underline">{{ unit.equipment }}</button></td>
                          <td class="p-3"><button v-if="unit.driver" @click="openModal('manageDriver', { driverName: unit.driver, shift: activeShiftData.shift })" class="text-blue-600 hover:underline">{{ unit.driver }}</button><em v-else class="text-gray-500">N/A</em></td>
                          <td class="p-3 font-mono text-xs">{{ unit.date }} {{ unit.time }}</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
                <!-- Standby Table -->
                <div>
                  <h4 class="font-semibold text-lg text-gray-700 dark:text-gray-300 mb-2">Standby ({{ uniqueStandbyUnits }})</h4>
                  <div class="overflow-x-auto rounded-lg shadow-sm border dark:border-gray-700">
                     <table class="min-w-full text-sm">
                        <thead class="bg-gray-50 dark:bg-gray-700/50"><tr class="text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase">
                          <th class="p-3">Equipment</th><th class="p-3">Primary Driver(s)</th>
                        </tr></thead>
                        <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                          <tr v-if="uniqueStandbyUnits === 0"><td colspan="2" class="p-4 text-center text-gray-500">No units on standby.</td></tr>
                          <tr v-for="unit in [...new Map(activeShiftData.standby.map(u => [u.equipment, u])).values()]" :key="unit.equipment" class="hover:bg-gray-50 dark:hover:bg-gray-700/50">
                            <td class="p-3 font-medium"><button @click="openModal('manageUnit', { equipment: unit.equipment, shift: activeShiftData.shift, status: 'standby' })" class="text-blue-600 hover:underline">{{ unit.equipment }}</button></td>
                            <td class="p-3"><template v-for="(driver, index) in unit.drivers" :key="driver.name"><button @click="openModal('manageDriver', { driverName: driver.name, shift: activeShiftData.shift })" class="text-blue-600 hover:underline">{{ driver.name }}</button><span class="text-xs font-mono p-1 rounded ml-1" :class="STATUS_CONFIG[driver.schedule[selectedDay-1]]?.className || STATUS_CONFIG.OTHER.className">{{ driver.schedule[selectedDay-1] }}</span><span v-if="index < unit.drivers.length - 1">, </span></template></td>
                          </tr>
                        </tbody>
                    </table>
                  </div>
                </div>
                <!-- Available Spares Table -->
                <div>
                  <h4 class="font-semibold text-lg text-green-600 dark:text-green-400 mb-2">Available Spares ({{ activeShiftData.spares?.length || 0 }})</h4>
                  <div class="overflow-x-auto rounded-lg shadow-sm border dark:border-gray-700">
                    <table class="min-w-full text-sm">
                      <thead class="bg-gray-50 dark:bg-gray-700/50"><tr class="text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase"><th class="p-3">Driver Name</th></tr></thead>
                      <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        <tr v-if="!activeShiftData.spares || activeShiftData.spares.length === 0"><td class="p-4 text-center text-gray-500">No available spares.</td></tr>
                        <tr v-for="name in activeShiftData.spares" :key="name" class="hover:bg-gray-50 dark:hover:bg-gray-700/50"><td class="p-3"><button @click="openModal('manageDriver', { driverName: name, shift: activeShiftData.shift })" class="text-blue-600 hover:underline">{{ name }}</button></td></tr>
                      </tbody>
                    </table>
                  </div>
                </div>
                <!-- Unavailable Drivers Table -->
                <div v-if="dashboardData.unavailableDrivers?.length > 0">
                  <h4 class="font-semibold text-lg text-orange-600 dark:text-orange-400 mb-2">Unavailable Drivers ({{ dashboardData.unavailableDrivers.length }})</h4>
                  <div class="overflow-x-auto rounded-lg shadow-sm border dark:border-gray-700">
                    <table class="min-w-full text-sm">
                      <thead class="bg-gray-50 dark:bg-gray-700/50"><tr class="text-left text-xs font-semibold text-gray-600 dark:text-gray-300 uppercase">
                        <th class="p-3">Driver Name</th><th class="p-3">Status</th>
                      </tr></thead>
                      <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                        <tr v-for="driver in dashboardData.unavailableDrivers" :key="driver.name" class="hover:bg-gray-50 dark:hover:bg-gray-700/50">
                          <td class="p-3"><button @click="openModal('manageDriver', { driverName: driver.name })" class="text-blue-600 hover:underline">{{ driver.name }}</button></td>
                          <td class="p-3"><span class="font-mono p-1 rounded text-xs" :class="STATUS_CONFIG[driver.status]?.className">{{ STATUS_CONFIG[driver.status]?.label || driver.status }}</span></td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
          </div>
          
          <div class="mt-8 bg-white dark:bg-gray-800 p-4 sm:p-6 rounded-xl shadow-lg">
              <div class="flex flex-col sm:flex-row justify-between items-center mb-4 gap-4">
                  <h2 class="text-xl font-bold text-gray-800 dark:text-gray-200">Full Roster Data</h2>
                  <div class="flex items-center gap-4 w-full sm:w-auto">
                    <input type="text" v-model="rosterFilter" placeholder="Search..." class="w-full sm:w-48 pl-4 pr-2 py-2 border rounded-full text-sm dark:bg-gray-700 dark:border-gray-600 dark:text-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <button @click="showFullRoster = !showFullRoster" class="text-blue-600 dark:text-blue-400 font-semibold text-sm whitespace-nowrap">{{ showFullRoster ? 'Hide' : 'Show' }} Roster</button>
                  </div>
              </div>
              <div v-if="showFullRoster && dashboardData" class="overflow-x-auto rounded-lg shadow border dark:border-gray-700">
                  <table class="min-w-full text-sm text-left text-gray-500 dark:text-gray-400">
                      <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400 sticky top-0">
                          <tr>
                              <th scope="col" class="py-3 px-6 whitespace-nowrap">Name</th>
                              <th scope="col" class="py-3 px-6 whitespace-nowrap">Equipment</th>
                              <th v-for="day in 31" :key="day" scope="col" class="py-3 px-2 text-center">{{ day }}</th>
                          </tr>
                      </thead>
                      <tbody>
                      <tr v-if="filteredRosterDrivers.length === 0"><td colspan="33" class="text-center py-4">No records found.</td></tr>
                      <tr v-for="driver in filteredRosterDrivers" :key="driver.id" class="bg-white dark:bg-gray-900 border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800">
                          <td class="py-2 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white">{{ driver.name }}</td>
                          <td class="py-2 px-6 whitespace-nowrap">{{ driver.equipment }}</td>
                          <td v-for="(status, index) in driver.schedule" :key="index" class="py-2 px-2 text-center text-white text-xs font-bold" :class="STATUS_CONFIG[status]?.className || STATUS_CONFIG.OTHER.className" :title="STATUS_CONFIG[status]?.label">{{ status }}</td>
                      </tr>
                      </tbody>
                  </table>
              </div>
          </div>
        </div>

        <!-- Global Modal -->
        <div v-if="isModalVisible" @keydown.esc="closeModal" class="fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex items-center justify-center p-4">
          <div @click.stop class="relative mx-auto p-6 border w-full max-w-lg shadow-lg rounded-md bg-white dark:bg-gray-800" role="dialog" aria-modal="true" :aria-labelledby="modal-title">
            <div class="flex justify-between items-start pb-3 border-b border-gray-200 dark:border-gray-700">
                <h3 id="modal-title" class="text-xl font-semibold text-gray-900 dark:text-white">{{ modalContent.title }}</h3>
                <button @click="closeModal" class="p-1 leading-none rounded-full text-gray-400 hover:text-gray-600 dark:hover:text-white hover:bg-gray-200 dark:hover:bg-gray-700" aria-label="Close modal">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                </button>
            </div>
            <div class="mt-4">
                <div v-if="modalContent.type === 'manageUnit'">
                    <div v-if="modalContent.view === 'main'" class="space-y-3">
                        <template v-if="modalContent.data.status === 'operating'">
                            <button @click="setModalView('reassignDriver')" class="w-full text-left p-3 bg-gray-100 hover:bg-blue-100 dark:bg-gray-700 dark:hover:bg-blue-900/50 rounded-md transition-colors">Re-assign Driver</button>
                            <button @click="setUnitStandby(modalContent.data.equipment, modalContent.data.shift)" class="w-full text-left p-3 bg-gray-100 hover:bg-yellow-100 dark:bg-gray-700 dark:hover:bg-yellow-900/50 rounded-md transition-colors">Set to Standby</button>
                            <button @click="setModalView('setBreakdown')" class="w-full text-left p-3 bg-gray-100 hover:bg-red-100 dark:bg-gray-700 dark:hover:bg-red-900/50 rounded-md transition-colors">Report Breakdown</button>
                        </template>
                        <template v-if="modalContent.data.status === 'standby'">
                            <button @click="setModalView('assignSpare')" class="w-full text-left p-3 bg-gray-100 hover:bg-green-100 dark:bg-gray-700 dark:hover:bg-green-900/50 rounded-md transition-colors">Assign Driver</button>
                            <button @click="setModalView('setBreakdown')" class="w-full text-left p-3 bg-gray-100 hover:bg-red-100 dark:bg-gray-700 dark:hover:bg-red-900/50 rounded-md transition-colors">Report Breakdown</button>
                        </template>
                         <template v-if="modalContent.data.status === 'breakdown'">
                            <button @click="setModalView('assignSpare')" class="w-full text-left p-3 bg-gray-100 hover:bg-green-100 dark:bg-gray-700 dark:hover:bg-green-900/50 rounded-md transition-colors">Assign Driver (Fixes Unit)</button>
                            <button @click="setUnitStandby(modalContent.data.equipment, modalContent.data.shift)" class="w-full text-left p-3 bg-gray-100 hover:bg-yellow-100 dark:bg-gray-700 dark:hover:bg-yellow-900/50 rounded-md transition-colors">Mark as Fixed (Moves to Standby)</button>
                        </template>
                    </div>
                    <div v-if="modalContent.view === 'reassignDriver' || modalContent.view === 'assignSpare'" class="space-y-4">
                        <label for="driver-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Select driver:</label>
                        <select v-model="modalFormData.selectedDriver" id="driver-select" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                            <option disabled value="">Please select one</option>
                            <option v-for="driver in (modalContent.view === 'reassignDriver' ? crossGroupSparesPool.reassign : crossGroupSparesPool.spares)" :key="driver.name" :value="driver.name">{{ driver.prefixedName }}</option>
                        </select>
                    </div>
                    <div v-if="modalContent.view === 'setBreakdown'" class="space-y-4">
                        <div>
                            <label for="breakdown-date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Breakdown Date</label>
                            <input v-model="modalFormData.date" type="date" id="breakdown-date" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                        </div>
                        <div>
                            <label for="breakdown-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Breakdown Time</label>
                            <input v-model="modalFormData.time" type="time" id="breakdown-time" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                        </div>
                    </div>
                </div>
                 <div v-if="modalContent.type === 'manageDriver'" class="space-y-4">
                    <label for="driver-status-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300">New Status:</label>
                    <select v-model="modalFormData.newStatus" id="driver-status-select" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                        <option value="">Select Status...</option>
                        <option v-for="s in UNAVAILABLE_STATUSES" :value="s" :key="s">{{ STATUS_CONFIG[s].label }}</option>
                    </select>
                    <button v-if="driverStatusOverrides[activeGroupIndex]?.[selectedDay]?.[modalContent.data.driverName]" @click="clearDriverStatus(modalContent.data.driverName); closeModal()" class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 hover:underline">Clear current status & Mark as Present</button>
                 </div>
                 <div v-if="modalContent.type === 'manualBreakdown'" class="space-y-4">
                    <div>
                        <label for="manual-unit-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Unit Name</label>
                        <input v-model="modalFormData.equipment" type="text" id="manual-unit-name" placeholder="e.g., DT HANVAN 123" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white uppercase">
                    </div>
                    <div>
                        <label for="breakdown-date" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Breakdown Date</label>
                        <input v-model="modalFormData.date" type="date" id="breakdown-date" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                    </div>
                    <div>
                        <label for="breakdown-time" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Breakdown Time</label>
                        <input v-model="modalFormData.time" type="time" id="breakdown-time" class="mt-1 w-full p-2 border border-gray-300 rounded-md shadow-sm dark:bg-gray-700 dark:border-gray-600 dark:text-white">
                    </div>
                </div>
            </div>
            <div class="mt-6 flex justify-end items-center gap-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                 <button v-if="modalContent.type === 'manageUnit' && modalContent.view !== 'main'" @click="setModalView('main')" type="button" class="py-2 px-4 text-gray-800 dark:text-gray-200 hover:underline">Back</button>
                 <div class="flex-grow"></div>
                <button @click="closeModal" type="button" class="py-2 px-4 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 transition-colors">Cancel</button>
                <button v-if="(modalContent.view !== 'main' && modalContent.type === 'manageUnit') || modalContent.type === 'manageDriver' || modalContent.type === 'manualBreakdown'" @click="handleModalConfirm" type="button" class="py-2 px-4 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                    Save Changes
                </button>
            </div>
          </div>
        </div>
      </template>
    </div>
    `
});

app.mount('#app');
